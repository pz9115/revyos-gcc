#!/usr/bin/env python

# RISC-V multilib list generator.
# Copyright (C) 2011-2020 Free Software Foundation, Inc.
# Contributed by Andrew Waterman (andrew@sifive.com).
# 
# This file is part of GCC.
# 
# GCC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GCC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Each argument to this script is of the form
#  <primary arch>-<abi>-<additional arches>-<extensions>
# Example 1:
#  rv32imafd-ilp32d-rv32g-c,v
# means that, in addition to rv32imafd, these configurations can also use the
# rv32imafd-ilp32d libraries: rv32imafdc, rv32imafdv, rv32g, rv32gc, rv32gv
#
# Example 2:
#  rv32imafd-ilp32d--c*b
# means that, in addition to rv32imafd, these configurations can also use the
# rv32imafd-ilp32d libraries: rv32imafdc-ilp32d, rv32imafdb-ilp32d,
#                             rv32imafdcb-ilp32d
#
# In addition, the multi-character extensions (include the standard extensions
# with version numbers) must be separated from other extensions by "_" so that
# they can be handled correctly.
# Example :
#  rv64ima_f2p0_dc-lp64d-rv64imafdc_zpa_zpd-b3p1,v    # Valid
#  rv64imaf2p0_dc-lp64d-rv64imafdc_zpa_zpd-b3p1,v     # Invalid
#  rv64ima_f2p0dc-lp64d-rv64imafdc_zpa_zpd-b3p1,v     # Invalid
#  rv64ima_f2p0_dc-lp64d-rv64imafczpa_zpd-b3p1,v      # Invalid
#  rv64ima_f2p0_dc-lp64d-rv64imafc_zpazpd-b3p1,v      # Invalid

from __future__ import print_function
import sys
import collections
import itertools
from functools import reduce

#
# TODO: Add test for this script.
#

arches = collections.OrderedDict()
abis = collections.OrderedDict()
required = []
reuse = []

canonical_order = "eimafdgqlcbjtpvn"
LONG_EXT_PREFIXES = ['z', 's', 'h', 'x']

#
# IMPLIED_EXT(ext) -> implied extension list.
#
IMPLIED_EXT = {
  "d" : ["f"],
  # XXX: Not sure ZFH is implied F or not, because the spec is not clear,
  #      but add it could prevent invalid combination.
  "zfh" : ["f"],
  # XXX: WORK-AROUND for v = zvbase + zvlsseg + zvamo.
  #      We don't have formal name for zvbase yet, so just add zvlsseg and zvamo
  #      to implied list for resolve multi-lib issue.
  "v" : ["zvl128b", "zve64d"],
  "v0p7"   : ['zvlsseg0p7', 'zvamo0p7'],
  "zve32x" : ["zvl32b"],
  "zve64x" : ["zve32x", "zvl64b"],
  "zve32f" : ["f", "zve32x"],
  "zve64f" : ["f", "zve32f", "zve64x"],
  "zve64d" : ["d", "zve64f"],

  "zvl64b" : ["zvl32b"],
  "zvl128b" : ["zvl64b"],
  "zvl256b" : ["zvl128b"],
  "zvl512b" : ["zvl256b"],
  "zvl1024b" : ["zvl512b"],
  "zvl2048b" : ["zvl1024b"],
  "zvl4096b" : ["zvl2048b"],
  "zvl8192b" : ["zvl4096b"],
  "zvl16384b" : ["zvl8192b"],
  "zvl32768b" : ["zvl16384b"],
  "zvl65536b" : ["zvl32768b"],
  # XXX: WORK-AROUND for zvqmac, zvqmac need v, which mean we also implied
  #      zvlsseg and zvamo
  "zvqmac"   : ['v', 'zvlsseg', 'zvamo'],
  "b" : ["zba", "zbb", "zbc", "zbs"],
}

def arch_canonicalize(arch):
  # TODO: Support extension version.
  new_arch = ""
  if arch[:5] in ['rv32e', 'rv32i', 'rv32g', 'rv64i', 'rv64g']:
    # TODO: We should expand g to imad_zifencei once we support newer spec.
    arch = arch[:5].replace("g", "imafd") + arch[5:]
    new_arch = arch[:4]
  else:
    raise Exception("Unexpected arch: `%s`" % arch[:5])

  long_ext_prefixes_idx = arch.find('_')
  if long_ext_prefixes_idx != -1:
    long_exts = list(filter(None, arch[long_ext_prefixes_idx:].split("_")))
    std_exts = list(arch[4:long_ext_prefixes_idx])
  else:
    long_exts = []
    std_exts = list(arch[4:])

  i = 0
  while i < len(long_exts):
    ext = long_exts[i]
    if len(ext) == 1 or (ext[0] in canonical_order and ext[-1].isdigit()):
      std_exts.append(ext)
      long_exts.remove(ext)
    elif ext[0] in canonical_order:
      std_exts.extend(list(ext))
      long_exts.remove(ext)
    else:
      i += 1


  #
  # Handle implied extensions.
  #
  for ext in std_exts + long_exts:
    if ext in IMPLIED_EXT:
      implied_exts = IMPLIED_EXT[ext]
      for implied_ext in implied_exts:
        if implied_ext not in std_exts + long_exts:
          if implied_ext[0] in canonical_order:
            std_exts.append (implied_ext)
          else:
            long_exts.append(implied_ext)

  def longext_sort (exts):
    if not exts.startswith("zxm") and exts.startswith("z"):
      if exts[1] not in canonical_order:
        raise Exception("Unsupported extension `%s`" % exts)
      canonical_sort = canonical_order.index(exts[1])
    else:
      canonical_sort = -1
    return (exts.startswith("x"), exts.startswith("zxm"), LONG_EXT_PREFIXES.index(exts[0]), canonical_sort, exts[1:])

  long_exts = list(set(long_exts))
  # Multi-letter extension must be in lexicographic order.
  long_exts.sort(key=longext_sort)

  # Check every extension is processed.
  for ext in std_exts:
    if ext[0] not in canonical_order:
      raise Exception("Unsupported extension `%s`" % ext)

  std_exts = list(set(std_exts))
  # Put extensions in canonical order.
  std_exts.sort(key = lambda x: canonical_order.index(x[0]))

  underline = False
  # Concat std extensions.
  for ext in std_exts:
    if len(ext) != 1 or underline:
      new_arch += "_" + ext
    else:
      new_arch += ext
    if  len(ext) != 1:
      underline = True
    else:
      underline = False


  # Concat rest of the multi-char extensions.
  if long_exts:
    new_arch += "_" + "_".join(long_exts)
  return new_arch

#
# add underline for each multi-char extensions.
# e.g. ["a", "zfh"] -> ["a", "_zfh"]
#
def add_underline_prefix(ext):
  for long_ext_prefix in LONG_EXT_PREFIXES:
    if ext.startswith(long_ext_prefix):
      return "_" + ext

  return ext

#
# Handle expansion operation.
#
# e.g. "a*b" -> [("a",), ("b",), ("a", "b")]
#      "a"   -> [("a",)]
#
def _expand_combination(ext):
  exts = list(ext.split("*"))

  # Add underline to every extension.
  # e.g.
  #  _b * zvamo => _b * _zvamo
  exts = list(map(lambda x: '_' + x, exts))
  # No need to expand if there is no `*`.
  if len(exts) == 1:
    return [(exts[0],)]

  # Generate combination!
  ext_combs = []
  for comb_len in range(1, len(exts)+1):
    for ext_comb in itertools.combinations(exts, comb_len):
      ext_combs.append(ext_comb)

  return ext_combs

#
# Input a list and drop duplicated entry.
# e.g.
#   ["a", "b", "ab", "a"] -> ["a", "b", "ab"]
#
def unique(x):
  #
  # Drop duplicated entry.
  # Convert list to set and then convert back to list.
  #
  # Add sorted to prevent non-deterministic results in different env.
  #
  return list(sorted(list(set(x))))

#
# Expand EXT string if there is any expansion operator (*).
# e.g.
#   "a*b,c" -> ["a", "b", "ab", "c"]
#
def expand_combination(ext):
  ext = list(filter(None, ext.split(',')))

  # Expand combination for EXT, got lots of list.
  # e.g.
  #   a * b => [[("a",), ("b",)], [("a", "b")]]
  ext_combs = list(map(_expand_combination, ext))

  # Then fold to single list.
  # e.g.
  #   [[("a",), ("b",)], [("a", "b")]] => [("a",), ("b",), ("a", "b")]
  ext = list(reduce(lambda x, y: x + y, ext_combs, []))

  # Fold the tuple to string.
  # e.g.
  #   [("a",), ("b",), ("a", "b")] => ["a", "b", "ab"]
  ext = map(lambda e : reduce(lambda x, y: x + y, e), ext)

  # Drop duplicated entry.
  ext = unique(ext)

  return ext

for cfg in sys.argv[1:]:
  try:
    (arch, abi, extra, ext) = cfg.split('-')
  except:
    print ("Invalid configure string %s, <arch>-<abi>-<extra>-<extensions>\n"
           "<extra> and <extensions> can be empty, "
           "e.g. rv32imafd-ilp32--" % cfg)
    sys.exit(1)

  arch = arch_canonicalize (arch)
  arches[arch] = 1
  abis[abi] = 1
  extra = list(filter(None, extra.split(',')))
  ext_combs = expand_combination(ext)
  alts = sum([[x] + [x + y for y in ext_combs] for x in [arch] + extra], [])
  alts = list(map(arch_canonicalize, alts))

  # Drop duplicated entry.
  alts = unique(alts)

  for alt in alts:
    if alt == arch:
      continue
    arches[alt] = 1
    reuse.append('march.%s/mabi.%s=march.%s/mabi.%s' % (arch, abi, alt, abi))
  required.append('march=%s/mabi=%s' % (arch, abi))

arch_options = '/'.join(['march=%s' % x for x in arches.keys()])
arch_dirnames = ' \\\n'.join(arches.keys())

abi_options = '/'.join(['mabi=%s' % x for x in abis.keys()])
abi_dirnames = ' \\\n'.join(abis.keys())

prog = sys.argv[0].split('/')[-1]
print('# This file was generated by %s with the command:' % prog)
print('#  %s' % ' '.join(sys.argv))

print('MULTILIB_OPTIONS = %s %s' % (arch_options, abi_options))
print('MULTILIB_DIRNAMES = %s %s' % (arch_dirnames, abi_dirnames))
print('MULTILIB_REQUIRED = %s' % ' \\\n'.join(required))
print('MULTILIB_REUSE = %s' % ' \\\n'.join(reuse))
