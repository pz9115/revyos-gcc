; Options for the RISC-V port of the compiler
;
; Copyright (C) 2011-2020 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/riscv/riscv-opts.h

mbranch-cost=
Target RejectNegative Joined UInteger Var(riscv_branch_cost)
-mbranch-cost=N	Set the cost of branches to roughly N instructions.

mplt
Target Report Var(TARGET_PLT) Init(1)
When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.

mabi=
Target Report RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32) Negative(mabi=)
Specify integer and floating-point calling convention.

mpreferred-stack-boundary=
Target RejectNegative Joined UInteger Var(riscv_preferred_stack_boundary_arg)
Attempt to keep stack aligned to this power of 2.

Enum
Name(abi_type) Type(enum riscv_abi_type)
Supported ABIs (for use with the -mabi= option):

EnumValue
Enum(abi_type) String(ilp32) Value(ABI_ILP32)

EnumValue
Enum(abi_type) String(ilp32e) Value(ABI_ILP32E)

EnumValue
Enum(abi_type) String(ilp32f) Value(ABI_ILP32F)

EnumValue
Enum(abi_type) String(ilp32d) Value(ABI_ILP32D)

EnumValue
Enum(abi_type) String(lp64) Value(ABI_LP64)

EnumValue
Enum(abi_type) String(lp64f) Value(ABI_LP64F)

EnumValue
Enum(abi_type) String(lp64d) Value(ABI_LP64D)

EnumValue
Enum(abi_type) String(lp64v) Value(ABI_LP64V)

EnumValue
Enum(abi_type) String(lp64dv) Value(ABI_LP64DV)

mfdiv
Target Report Mask(FDIV)
Use hardware floating-point divide and square root instructions.

mdiv
Target Report Mask(DIV)
Use hardware instructions for integer division.

march=
Target Report RejectNegative Joined Negative(march=)
-march=	Generate code for given RISC-V ISA (e.g. RV64IM).  ISA strings must be
lower-case.

mtune=
Target RejectNegative Joined Var(riscv_tune_string)
-mtune=PROCESSOR	Optimize the output for PROCESSOR.

mcpu=
Target RejectNegative Joined Var(riscv_cpu_string)
-mcpu=PROCESSOR	Use architecture of and optimize the output for PROCESSOR.

msmall-data-limit=
Target Joined Separate UInteger Var(g_switch_value) Init(8)
-msmall-data-limit=N	Put global and static data smaller than <number> bytes into a special section (on some targets).

msave-restore
Target Report Mask(SAVE_RESTORE)
Use smaller but slower prologue and epilogue code.

mshorten-memrefs
Target Bool Var(riscv_mshorten_memrefs) Init(1)
Convert BASE + LARGE_OFFSET addresses to NEW_BASE + SMALL_OFFSET to allow more
memory accesses to be generated as compressed instructions.  Currently targets
32-bit integer load/stores.

mcmodel=
Target Report RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)
Specify the code model.

mstrict-align
Target Report Mask(STRICT_ALIGN) Save
Do not generate unaligned memory accesses.

Enum
Name(code_model) Type(enum riscv_code_model)
Known code models (for use with the -mcmodel= option):

EnumValue
Enum(code_model) String(medlow) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medany) Value(CM_MEDANY)

mexplicit-relocs
Target Report Mask(EXPLICIT_RELOCS)
Use %reloc() operators, rather than assembly macros, to load addresses.

mrelax
Target Bool Var(riscv_mrelax) Init(1)
Take advantage of linker relaxations to reduce the number of instructions
required to materialize symbol addresses.

Enum
Name(rvv_vector_bits) Type(enum riscv_rvv_vector_bits_enum)
The possible RVV vector lengths:

EnumValue
Enum(rvv_vector_bits) String(scalable) Value(RVV_SCALABLE)

EnumValue
Enum(rvv_vector_bits) String(64) Value(RVV_64)

EnumValue
Enum(rvv_vector_bits) String(128) Value(RVV_128)

EnumValue
Enum(rvv_vector_bits) String(256) Value(RVV_256)

EnumValue
Enum(rvv_vector_bits) String(512) Value(RVV_512)

EnumValue
Enum(rvv_vector_bits) String(1024) Value(RVV_1024)

mrvv-vector-bits=
Target RejectNegative Joined Enum(rvv_vector_bits) Var(riscv_rvv_vector_bits) Init(RVV_SCALABLE)
-mrvv-vector-bits=<number>	Set the number of bits in an RVV vector register to N.

Mask(64BIT)

Mask(MUL)

Mask(BITMANIP)

Mask(ATOMIC)

Mask(HARD_FLOAT)

Mask(DOUBLE_FLOAT)

Mask(RVC)

Mask(RVE)

Mask(DSP)

Mask(ZPN)

Mask(ZPSFOPERAND)

Mask(ZPRVSFEXTRA)

Mask(VECTOR)

Mask(RVZFH)

Mask(ZFBFMIN)

Mask(ZVFBFMIN)

Mask(ZVFBFWMA)

Mask(RVZFA)

; T-Head mask

Mask(XTHEAD)

Mask(XTHEAD_C)

Mask(XTHEAD_E)

Mask(XTHEAD_SE)

Mask(XTHEAD_V)

Mask(MATRIX)

; T-Head extension

mldr
Target Report Var(riscv_insn_ldr) Init(1) Undocumented
Enable ldr and str instructions.

mldi
Target Report Var(riscv_insn_ldi) Init(1) Undocumented
Enable ldib/ldia and stib/stia instructions.

mfldr
Target Report Var(riscv_insn_fldr) Init(1) Undocumented
Enable float ldr and str instructions.

mext
Target Report Var(riscv_insn_ext) Init(1) Undocumented
Enable ext and extu instructions.

mmula
Target Report Var(riscv_insn_mula) Init(1) Undocumented
Enable multiply accumulate instructions.

maddsl
Target Report Var(riscv_insn_addsl) Init(1) Undocumented
Enable addsl instructions.

maddsluw
Target Report Var(riscv_insn_addsluw) Init(0) Undocumented
Enable addsluw instructions.

mrev
Target Report Var(riscv_insn_rev) Init(1) Undocumented
Enable rev instructions.

mrevw
Target Report Var(riscv_insn_revw) Init(1) Undocumented
Enable revw instructions.

msrri
Target Report Var(riscv_insn_srri) Init(1) Undocumented
Enable srri instructions.

msrriw
Target Report Var(riscv_insn_srriw) Init(1) Undocumented
Enable srriw instructions.

mcondmv
Target Report Var(riscv_insn_condmv) Init(1) Undocumented
Enable mveqz and mvnez instructions.

mldd
Target Report Var(riscv_insn_ldd) Init(1) Undocumented
Enable ldd and sdd instructions.

mxor-combine
Target Report Var(riscv_xor_combine) Init(1) Undocumented
Optimize xor combine operation with constant.

mfp16
Target Report Var(riscv_insn_fp16) Init(1) Undocumented
Enable __fp16 type.

mfclass
Target Report Var(riscv_insn_fclass) Init(1) Undocumented
Enable fclass instruction.

mfmvhw32
Target Report Var(riscv_insn_fmvhw32) Init(1) Undocumented
Enable 32 bit fmv.x.hw and fmv.hw.x instructions.

mipush
Target Report Var(riscv_insn_ipush) Init(1) Undocumented
Enable ipush and ipop instructions.

mdelete-vsetvl
Target Report Var(riscv_insn_dvsetvl) Init(1) Undocumented
Optimize code by deleting redundancy vsetvl.

mdelete-vsetvl2
Target Report Var(riscv_insn_dvsetvl2) Init(1) Undocumented
Optimize code by deleting redundancy vsetvl.

mdelete-vsetvl-globally
Target Report Var(riscv_insn_dvsetvl_globally) Init(1) Undocumented
Deleting redundancy vsetvl globally.

mdelete-read-vlenb
Target Report Var(riscv_insn_dread_vlenb) Init(1) Undocumented
Optimize code by deleting redundant reads of vlenb.

mmove-loop-vsetvl
Target Report Var(riscv_move_loop_vsetvl) Init(1) Undocumented
Move loop vsetvl computations out of loops.

mdelete-vsetvl-zero
Target Report Var(riscv_insn_dvsetvl_zero) Init(1) Undocumented
Optimize code by deleting redundancy vsetvl with x0 reg.

mdelete-vsetvl-zero-bbs
Target Report Var(riscv_insn_dvsetvl_zero_bbs) Init(1) Undocumented
Optimize code by deleting redundancy vsetvl with x0 reg in all blocks.

mdelete-vsetvl-v0p7
Target Report Var(riscv_insn_dvsetvl_v0p7) Init(1) Undocumented
Optimize code by deleting redundancy vsetvl.

mfwprop-vmov-v0p7
Target Report Var(riscv_fwprop_vmov_v0p7) Init(1) Undocumented
Forward propagrate whole register vmov for v0p7.

mdelete-fsrm
Target Report Var(riscv_insn_dfsrm) Init(1) Undocumented
Optimize code by deleting redundancy fsrm.

mdelete-sext
Target Report Var(riscv_insn_dsext1) Init(1) Undocumented
Optimize code by deleting redundancy sext, insert before ree pass.

mdelete-sext2
Target Report Var(riscv_insn_dsext2) Init(1) Undocumented
Optimize code by deleting redundancy sext, insert after ree pass.

mcombine-copy
Target Report Var(riscv_combine_copy) Init(0) Undocumented
Enable copy feature in pass combine.

mload-merging
Target Report Var(riscv_load_merging) Init(0) Undocumented
Enable adjacent loads, and then extract for each element.

mccrt
Target Report Var(riscv_libcc_runtime)
Use code-size first compiler runtime instead of libgcc, it's only supported in rv32.

Wbuiltin-const-overflow
Target Var(warn_builtin_const_overflow) Init(1) Warning
Warn if the const value for the builtin was overflowed.

mdup-loop-header
Target Var(riscv_dup_loop_header) Init(1) Undocumented
Enable duplicate header block that has non-IV loop variant in ch2 pass.

mipa-unhot-inline
Target Report Var(riscv_ipa_unhot_inline) Init(0) Undocumented
Make not big speedup code inline more.

minvariant-as-constant
Target Var(riscv_invariant_as_constant) Init(1) Undocumented
Treat invariant as constant when compute the cost of unroll loop.

mrnreg-delete-noop-move
Target Report Var(riscv_rnreg_delete_noop_move) Init(0) Undocumented
Optimize code by deleting redundancy noop move.

mcombine-cse
Target Var(riscv_combine_cse) Init(1) Undocumented
Do CSE optimization when the result of combine are two SET insns.

mriscv_fli_value_by_int
Target Var(riscv_fli_value_by_int) Init(0) Undocumented
The fli instruction in the zfa extension uses integers to represent floating-point values.

; T-Head compatibility

m4k-opts
Target Report Var(riscv_4k_optimize) Init(0)
Optimize load instruction generation of loop.

msignedness-cmpiv
Target Bool Var(riscv_signedness_comparison_iv) Init(1) Undocumented
Enable signedness comparison when canonicalize induce varaible.

mthread-jumps1
Target Bool Var(riscv_thread_jumps1) Init(1)
Enable first pass of thread jumps optimization.

miv-adjust-addr-cost
Target Bool Var(riscv_iv_adjust_addr_cost) Init(1)
Enable address cost adjustment in pass loop-ivopts.

mexpand-split-imm
Target Bool Var(riscv_expand_split_imm) Init(1) Undocumented
Enable split immediate operand in expand.

mriscv-attribute
Target Report Var(riscv_emit_attribute_p) Init(-1)
Emit RISC-V ELF attribute.

malign-data=
Target RejectNegative Joined Var(riscv_align_data_type) Enum(riscv_align_data) Init(riscv_align_data_type_xlen)
Use the given data alignment.

minline-atomics
Target Var(TARGET_INLINE_SUBWORD_ATOMIC) Init(1)
Always inline subword atomic operations.

Enum
Name(riscv_align_data) Type(enum riscv_align_data)
Known data alignment choices (for use with the -malign-data= option):

EnumValue
Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)

EnumValue
Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)

TargetVariable
int riscv_bitmanip_subext

TargetVariable
int riscv_zi_subext

TargetVariable
int riscv_zc_subext

Enum
Name(isa_spec_class) Type(enum riscv_isa_spec_class)
Supported ISA specs (for use with the -misa-spec= option):

EnumValue
Enum(isa_spec_class) String(2.2) Value(ISA_SPEC_CLASS_2P2)

EnumValue
Enum(isa_spec_class) String(20190608) Value(ISA_SPEC_CLASS_20190608)

EnumValue
Enum(isa_spec_class) String(20191213) Value(ISA_SPEC_CLASS_20191213)

misa-spec=
Target Report RejectNegative Joined Enum(isa_spec_class) Var(riscv_isa_spec) Init(TARGET_DEFAULT_ISA_SPEC)
Set the version of RISC-V ISA spec.
